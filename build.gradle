buildscript {

  repositories {
    //    def _localRepoDir = System.getenv('CG_LOCAL_REPO') ?: 'D:/CG-maven-repo'
    //    def localRepoDir = System.getProperty('localRepoDir', _localRepoDir)
    //    maven { url uri(localRepoDir) }
    mavenLocal()
    mavenCentral()
  }
  dependencies { classpath 'ee.mdd:ee-mdd-gradle:1.0-SNAPSHOT' }
}

def _scripts = System.getenv('CG_CM_SCRIPTS_HOME') ?: 'D:/CG/src/cg-cm/cg-cm-scripts'
ext.scripts = project.hasProperty('superpom') ? project.superpom : "$_scripts/gradlebuild"
logger.info "Calculated 'superpom' location: $scripts"

File f = null
try {
  f = file("$scripts/repos.gradle")
} catch (e) {}



apply plugin: 'ee.mdd'

allprojects {
  group = 'ee.mdd_example'
  version = '1.0-SNAPSHOT'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'maven'

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  dependencies {
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.5'
    runtime group: 'ch.qos.logback', name:'logback-classic', version: '1.0.11'
    testCompile 'junit:junit:4.+'
  }

  if(f && f.exists()) {
    apply from: f.absolutePath
  } else {
    repositories {
      mavenLocal()
      mavenCentral()
    }
  }

  jar {
    manifest {
      attributes 'Implementation-Title': 'Example for - Model Driven Development - DSL and Generator for several languages', 'Implementation-Version': version
    }

    task cleanAll << { task ->
      [
        'bin',
        'target',
        'build',
        'dist',
        'temp',
        '.idea',
        'dist.zip'
      ].each { name ->
        def file = new File("$task.project.name/$name")
        if(file.exists()) if(file.isDirectory())file.deleteDir() else file.delete()
      }
    }

    task createFolders << { task ->
      [
        'src/main/java',
        'src/main/resources',
        'src/test/java',
        'src/test/resources',
        'src-gen/main/java',
        'src-gen/main/resources',
        'src-gen/test/java',
        'src-gen/test/resources'
      ].each { name ->
        def file = new File("$task.project.name/$name")
        file.mkdirs()
      }
    }
  }

  mdd {
    target = './'

//    facets = {
//      java {
//        common()
//        cdi()
//        ejb()
//        jms()
//        jpa()
//        test()
//        ee()
//        cg()
//      }
//    }
  }

  defaultTasks 'build', 'install'
}
